import express from 'express';
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();

// Kết nối tới MongoDB
mongoose.connect('mongodb://localhost/xeoto', { useNewUrlParser: true, useUnifiedTopology: true });

// Kiểm tra kết nối
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  console.log('Connected to MongoDB');
});

// Định nghĩa schema và model cho xe ô tô
const carSchema = new mongoose.Schema({
  brand: String,
  model: String,
  year: Number,
  color: String,
  price: Number
});

const Car = mongoose.model('Car', carSchema);

// Sử dụng bodyParser để lấy thông tin từ request body
app.use(bodyParser.json());

// API lấy danh sách xe ô tô
app.get('/cars', async (req, res) => {
  try {
    const cars = await Car.find();
    res.json(cars);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// API thêm mới xe ô tô
app.post('/cars', async (req, res) => {
  const car = new Car({
    brand: req.body.brand,
    model: req.body.model,
    year: req.body.year,
    color: req.body.color,
    price: req.body.price
  });

  try {
    const newCar = await car.save();
    res.status(201).json(newCar);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// API lấy thông tin chi tiết của xe ô tô
app.get('/cars/:id', getCar, (req, res) => {
  res.json(res.car);
});

// API cập nhật thông tin xe ô tô
app.patch('/cars/:id', getCar, async (req, res) => {
  if (req.body.brand != null) {
    res.car.brand = req.body.brand;
  }

  if (req.body.model != null) {
    res.car.model = req.body.model;
  }

  if (req.body.year != null) {
    res.car.year = req.body.year;
  }

  if (req.body.color != null) {
    res.car.color = req.body.color;
  }

  if (req.body.price != null) {
    res.car.price = req.body.price;
  }

  try {
    const updatedCar = await res.car.save();
    res.json(updatedCar);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// API xóa xe ô tô
app.delete('/cars/:id', getCar, async (req, res) => {
  try {
    await res.car.remove();
    res.json({ message: 'Car deleted' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Middleware để lấy thông tin xe ô tô từ database dựa trên ID
// async function getCar(req, res, next) {
//   let car
